/*
 * This file is generated by jOOQ.
 */
package com.leon.quick.tables;


import com.leon.quick.AnalyzeSource;
import com.leon.quick.tables.records.CodeCommitRecord;

import java.math.BigInteger;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeCommit extends TableImpl<CodeCommitRecord> {

    private static final long serialVersionUID = -1427692403;

    /**
     * The reference instance of <code>analyze_source.code_commit</code>
     */
    public static final CodeCommit CODE_COMMIT = new CodeCommit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeCommitRecord> getRecordType() {
        return CodeCommitRecord.class;
    }

    /**
     * The column <code>analyze_source.code_commit.username</code>.
     */
    public final TableField<CodeCommitRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>analyze_source.code_commit.total_commit_num</code>.
     */
    public final TableField<CodeCommitRecord, BigInteger> TOTAL_COMMIT_NUM = createField("total_commit_num", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(65), this, "");

    /**
     * The column <code>analyze_source.code_commit.added_file_num</code>.
     */
    public final TableField<CodeCommitRecord, BigInteger> ADDED_FILE_NUM = createField("added_file_num", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(65), this, "");

    /**
     * The column <code>analyze_source.code_commit.added_line_num</code>.
     */
    public final TableField<CodeCommitRecord, BigInteger> ADDED_LINE_NUM = createField("added_line_num", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(65), this, "");

    /**
     * The column <code>analyze_source.code_commit.total_commit_num_series</code>.
     */
    public final TableField<CodeCommitRecord, byte[]> TOTAL_COMMIT_NUM_SERIES = createField("total_commit_num_series", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>analyze_source.code_commit</code> table reference
     */
    public CodeCommit() {
        this(DSL.name("code_commit"), null);
    }

    /**
     * Create an aliased <code>analyze_source.code_commit</code> table reference
     */
    public CodeCommit(String alias) {
        this(DSL.name(alias), CODE_COMMIT);
    }

    /**
     * Create an aliased <code>analyze_source.code_commit</code> table reference
     */
    public CodeCommit(Name alias) {
        this(alias, CODE_COMMIT);
    }

    private CodeCommit(Name alias, Table<CodeCommitRecord> aliased) {
        this(alias, aliased, null);
    }

    private CodeCommit(Name alias, Table<CodeCommitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CodeCommit(Table<O> child, ForeignKey<O, CodeCommitRecord> key) {
        super(child, key, CODE_COMMIT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AnalyzeSource.ANALYZE_SOURCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeCommit as(String alias) {
        return new CodeCommit(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeCommit as(Name alias) {
        return new CodeCommit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeCommit rename(String name) {
        return new CodeCommit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeCommit rename(Name name) {
        return new CodeCommit(name, null);
    }
}
